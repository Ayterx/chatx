"use client"

import { useTransition } from "react"
import { notFound, useParams, useRouter } from "next/navigation"
import { api } from "api"
import clsx from "clsx"
import { useMutation, useQuery } from "convex/react"
import { Loader2 } from "lucide-react"

import { Markdown } from "~/app/(main)/chat/[id]/_components/markdown"
import { Reasoning } from "~/app/(main)/chat/[id]/_components/reasoning"
import { Button } from "~/components/interface/button"
import { getModel } from "~/lib/models"
import { Copy } from "../../chat/[id]/_components/copy"

const minHeights = "min-h-[calc(100svh-14.125rem)] lg:min-h-[calc(100svh-14.75rem)]"

// TODO: this is a copy of chatMessages.tsx, I should refactor it to be shared component.

export default function Page() {
  const params = useParams()
  const data = useQuery(api.share.getShareLink, { id: params.id as string })

  const [isPending, startTransition] = useTransition()

  const cloneChat = useMutation(api.share.cloneChat)

  const router = useRouter()

  if (data?.error) return notFound()

  if (!data?.messages) return null

  const messages = data.messages

  return (
    <>
      <div
        id="scrollable"
        className="scrollbar-gutter w-full flex-[1_1_0] justify-center overflow-y-auto"
      >
        <section className="mx-auto w-full max-w-3xl pb-12 lg:px-2">
          {messages.map((message, messageIndex) => {
            const modelKey = (message.annotations as Record<string, string>[] | undefined)?.find(
              (a) => a.model
            )
            const model = getModel(modelKey?.model ?? "unknown")

            const typography = "prose prose-invert prose-neutral prose-p:my-1 w-full max-w-none"

            return (
              <div
                key={message.id}
                className={clsx("relative", {
                  [minHeights]: messageIndex === messages.length - 1 && message.role !== "user"
                })}
              >
                <div
                  className={clsx("group relative flex w-full flex-col", {
                    "items-end": message.role === "user",
                    "py-4": message.role === "assistant"
                  })}
                >
                  <div
                    className={clsx({
                      "max-w-11/12 bg-neutral-900 px-3 py-2 whitespace-pre-wrap":
                        message.role === "user",
                      "rounded-lg": true
                    })}
                  >
                    {message.parts.map((part, index) => {
                      if (part.type === "reasoning")
                        return (
                          <Reasoning key={`${message.id}-${index}-reasoning`}>
                            <Markdown
                              id={`${message.id}-${index}-reasoning`}
                              className={typography}
                            >
                              {part.reasoning}
                            </Markdown>
                          </Reasoning>
                        )

                      if (part.type === "text") {
                        if (message.role === "user")
                          return <p key={`${message.id}-${index}-text`}>{part.text}</p>

                        return (
                          <Markdown
                            key={`${message.id}-${index}-text`}
                            id={`${message.id}-${index}-text`}
                            className={typography}
                          >
                            {part.text}
                          </Markdown>
                        )
                      }
                    })}
                  </div>
                  <div
                    className={clsx("flex items-center gap-1 pt-1 transition-opacity", {
                      "group-hover:opacity-100 lg:opacity-0 [&:has([data-state=open])]:opacity-100":
                        true
                    })}
                  >
                    {message.role === "assistant" && (
                      <>
                        <Copy text={message.content} />
                        <span className="ps-2 text-sm font-medium text-neutral-600">
                          Generated by {model?.name ?? "unkonwn"}
                        </span>
                      </>
                    )}
                    {message.role === "user" && (
                      <>
                        <Copy text={message.content} />
                      </>
                    )}
                  </div>
                </div>
              </div>
            )
          })}
        </section>
      </div>
      <div className="relative z-49 flex w-full flex-[0_0_auto] justify-center before:pointer-events-none before:absolute before:bottom-full before:h-12 before:w-full before:max-w-3xl before:bg-gradient-to-b before:from-neutral-950/0 before:to-neutral-950 max-lg:pb-2 lg:pe-2">
        <div className="flex w-full max-w-3xl items-center justify-between rounded-2xl bg-neutral-900 px-4 py-2">
          <div>
            <span className="block text-lg font-bold">{data.title}</span>
            <span className="text-sm text-neutral-400">{data.user}</span>
          </div>
          <Button
            onClick={() =>
              startTransition(async () => {
                const chatId = await cloneChat({ id: params.id as string })
                router.push(`/chat/${chatId}`)
              })
            }
          >
            {isPending ? <Loader2 className="animate-spin" /> : "Clone chat"}
          </Button>
        </div>
      </div>
    </>
  )
}
