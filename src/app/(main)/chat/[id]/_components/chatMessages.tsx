import { ArrowPathIcon, PencilSquareIcon } from "@heroicons/react/16/solid"
import clsx from "clsx"

import type { useChat } from "../_lib/useChat"
import { Markdown } from "~/app/(main)/chat/[id]/_components/markdown"
import { Reasoning } from "~/app/(main)/chat/[id]/_components/reasoning"
import { getModel } from "~/lib/models"
import { Copy } from "./copy"
import { EditMessage } from "./editMessage"
import { RetryMessage } from "./retryMessage"

const minHeights = "min-h-[calc(100svh-14.125rem)] lg:min-h-[calc(100svh-14.75rem)]"

export const actionButtonStyle = clsx(
  "block rounded-md p-1.5 text-neutral-400 transition-colors hover:bg-neutral-900 hover:text-neutral-100 focus:bg-neutral-900 focus:text-neutral-100 data-[state=open]:bg-neutral-900 data-[state=open]:text-neutral-100"
)

export const ChatMessages = ({
  editingMessageId,
  error,
  handleEditMessage,
  messages,
  retryErroredMessage,
  retryMessage,
  setEditingMessageId,
  status
}: ReturnType<typeof useChat>) => {
  return (
    <section className="mx-auto w-full max-w-3xl pb-12 lg:px-2">
      {messages.map((message, messageIndex) => {
        const modelKey = (message.annotations as Record<string, string>[] | undefined)?.find(
          (a) => a.model
        )
        const model = getModel(modelKey?.model ?? "unknown")

        const textPart = message.parts.find((p) => p.type === "text") as
          | { type: "text"; text: string }
          | undefined
        const content = textPart?.text ?? message.content

        const typography = "prose prose-invert prose-neutral prose-p:my-1 w-full max-w-none"

        return (
          <div
            key={message.id}
            className={clsx("relative", {
              [minHeights]: messageIndex === messages.length - 1 && message.role !== "user"
            })}
          >
            <div
              className={clsx("group relative flex w-full flex-col", {
                "items-end": message.role === "user",
                "py-4": message.role === "assistant"
              })}
            >
              <div
                className={clsx({
                  "max-w-11/12 bg-neutral-900 px-3 py-2 whitespace-pre-wrap":
                    message.role === "user",
                  "w-full rounded-2xl": editingMessageId === message.id,
                  "rounded-lg": editingMessageId !== message.id
                })}
              >
                {message.role === "user" && editingMessageId === message.id ? (
                  <EditMessage
                    defaultValue={content}
                    handleEditMessage={async (editedMessage) =>
                      await handleEditMessage({
                        editedMessage,
                        message: content,
                        messageIndex
                      })
                    }
                  />
                ) : (
                  message.parts.map((part, index) => {
                    if (part.type === "reasoning")
                      return (
                        <Reasoning key={`${message.id}-${index}-reasoning`}>
                          <Markdown id={`${message.id}-${index}-reasoning`} className={typography}>
                            {part.reasoning}
                          </Markdown>
                        </Reasoning>
                      )

                    if (part.type === "text") {
                      if (message.role === "user")
                        return <p key={`${message.id}-${index}-text`}>{part.text}</p>

                      return (
                        <Markdown
                          key={`${message.id}-${index}-text`}
                          id={`${message.id}-${index}-text`}
                          className={typography}
                        >
                          {part.text}
                        </Markdown>
                      )
                    }
                  })
                )}
              </div>
              <div
                className={clsx("flex items-center gap-1 pt-1 transition-opacity", {
                  "opacity-0": status !== "ready" && status !== "error",
                  "group-hover:opacity-100 lg:opacity-0 [&:has([data-state=open])]:opacity-100":
                    status === "ready" || status === "error"
                })}
              >
                {message.role === "assistant" && (
                  <>
                    <Copy text={message.content} />
                    <RetryMessage retryMessage={retryMessage} messageIndex={messageIndex} />
                    <span className="ps-2 text-sm font-medium text-neutral-600">
                      Generated by {model?.name ?? "unkonwn"}
                    </span>
                  </>
                )}
                {message.role === "user" && (
                  <button
                    onClick={() => {
                      if (editingMessageId === message.id) setEditingMessageId(null)
                      else setEditingMessageId(message.id)
                    }}
                    className={actionButtonStyle}
                  >
                    <PencilSquareIcon className="size-4" />
                  </button>
                )}
              </div>
            </div>
          </div>
        )
      })}

      {status === "submitted" && (
        <div className={clsx("flex gap-1 pt-8", minHeights)}>
          {[...Array(3)].map((_, i) => (
            <div
              key={i}
              className="bg-primary size-2 animate-[bounce-dots_1.4s_ease-in-out_infinite] rounded-full"
              style={{
                animationDelay: `${i * 160}ms`
              }}
            />
          ))}
        </div>
      )}

      {status === "error" && (
        <div className={clsx("pt-4", minHeights)}>
          <div className="mb-1 rounded-lg border border-red-500/15 bg-red-500/10 px-4 py-2 text-red-500">
            {error?.message}
          </div>
          <button onClick={retryErroredMessage} className={actionButtonStyle}>
            <ArrowPathIcon className="size-4" />
          </button>
        </div>
      )}
    </section>
  )
}
