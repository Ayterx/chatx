import { Fragment } from "react"
import clsx from "clsx"
import { useStore } from "zustand"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuShortcut,
  DropdownMenuTrigger
} from "~/components/interface/dropdown-menu"
import { featureIcon, models } from "~/lib/models"
import { selectTriggerStyle } from "."
import { chatStore } from "../lib/store"

export const ModelOption = () => {
  const model = useStore(chatStore, (state) => state.model)

  return (
    <DropdownMenu>
      <DropdownMenuTrigger className={clsx(selectTriggerStyle, "whitespace-nowrap")}>
        {model.name}
      </DropdownMenuTrigger>

      <DropdownMenuPortal>
        <DropdownMenuContent align="start" onCloseAutoFocus={(event) => event.preventDefault()}>
          <DropdownMenuLabel>Models</DropdownMenuLabel>
          {Object.entries(models).map(([id, model]) => {
            let logo = null

            switch (model.company) {
              case "Anthropic":
                logo = (
                  <svg
                    viewBox="0 0 46 32"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="currentColor"
                    className="size-4"
                  >
                    <path d="M32.73 0h-6.945L38.45 32h6.945L32.73 0ZM12.665 0 0 32h7.082l2.59-6.72h13.25l2.59 6.72h7.082L19.929 0h-7.264Zm-.702 19.337 4.334-11.246 4.334 11.246h-8.668Z"></path>
                  </svg>
                )
                break
              case "OpenAI":
                logo = (
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 16 16"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M6.13672 5.77199V4.26555C6.13672 4.13868 6.18434 4.0435 6.29528 3.98015L9.3241 2.23585C9.73638 1.998 10.228 1.88706 10.7353 1.88706C12.6382 1.88706 13.8434 3.36181 13.8434 4.93161C13.8434 5.04258 13.8434 5.16946 13.8275 5.29633L10.6877 3.45686C10.4975 3.34591 10.3071 3.34591 10.1169 3.45686L6.13672 5.77199ZM13.209 11.6392V8.03954C13.209 7.81749 13.1138 7.65892 12.9236 7.54795L8.94345 5.23281L10.2437 4.48747C10.3547 4.42412 10.4499 4.42412 10.5609 4.48747L13.5897 6.23176C14.4619 6.73925 15.0485 7.81749 15.0485 8.864C15.0485 10.0691 14.335 11.1792 13.209 11.6391V11.6392ZM5.20115 8.46778L3.90086 7.70668C3.78992 7.64333 3.7423 7.54811 3.7423 7.42124V3.93269C3.7423 2.23602 5.04258 0.951495 6.80277 0.951495C7.46886 0.951495 8.08716 1.17355 8.61058 1.56996L5.48672 3.37774C5.29649 3.48868 5.20132 3.64725 5.20132 3.86933V8.46791L5.20115 8.46778ZM7.99998 10.0852L6.13672 9.03863V6.8187L7.99998 5.77216L9.86312 6.8187V9.03863L7.99998 10.0852ZM9.19719 14.9058C8.53114 14.9058 7.91283 14.6838 7.38941 14.2874L10.5132 12.4796C10.7035 12.3686 10.7987 12.2101 10.7987 11.988V7.38941L12.1149 8.15052C12.2258 8.21387 12.2735 8.30905 12.2735 8.43596V11.9245C12.2735 13.6212 10.9572 14.9057 9.19719 14.9057V14.9058ZM5.439 11.3697L2.41018 9.62543C1.53797 9.11791 0.95133 8.03971 0.95133 6.99316C0.95133 5.77216 1.68077 4.67803 2.80657 4.21813V7.83355C2.80657 8.0556 2.90178 8.21417 3.092 8.32515L7.05639 10.6244L5.7561 11.3697C5.64516 11.433 5.54994 11.433 5.439 11.3697ZM5.26467 13.9703C3.47279 13.9703 2.1566 12.6224 2.1566 10.9574C2.1566 10.8305 2.1725 10.7036 2.18826 10.5768L5.31213 12.3845C5.50235 12.4955 5.69274 12.4955 5.88297 12.3845L9.86312 10.0853V11.5918C9.86312 11.7186 9.81553 11.8138 9.70455 11.8772L6.67577 13.6215C6.26346 13.8593 5.77186 13.9703 5.2645 13.9703H5.26467ZM9.19719 15.8572C11.1159 15.8572 12.7174 14.4935 13.0823 12.6857C14.8583 12.2258 16 10.5608 16 8.86416C16 7.7541 15.5243 6.6759 14.668 5.89887C14.7473 5.56584 14.7949 5.23281 14.7949 4.89995C14.7949 2.6324 12.9554 0.935566 10.8305 0.935566C10.4025 0.935566 9.99015 0.99892 9.57784 1.14172C8.86416 0.443972 7.88101 0 6.80277 0C4.88405 0 3.28256 1.36364 2.91771 3.17142C1.14172 3.63132 0 5.29633 0 6.993C0 8.10306 0.475665 9.18126 1.33198 9.9583C1.2527 10.2913 1.20511 10.6244 1.20511 10.9572C1.20511 13.2248 3.04458 14.9216 5.16946 14.9216C5.59753 14.9216 6.00984 14.8582 6.42215 14.7154C7.13567 15.4132 8.11882 15.8572 9.19719 15.8572Z"
                      fill="currentColor"
                    />
                  </svg>
                )
                break
              case "DeepSeek":
                logo = (
                  <svg
                    width="16"
                    height="12"
                    viewBox="0 0 16 12"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M15.8326 1.00711C15.6628 0.922735 15.5898 1.08346 15.4905 1.16515C15.4569 1.19194 15.428 1.22676 15.3997 1.25756C15.1516 1.52811 14.8621 1.7049 14.4845 1.68347C13.9312 1.65267 13.4595 1.82946 13.0424 2.26073C12.9535 1.729 12.6588 1.41159 12.2108 1.20801C11.9759 1.1022 11.7384 0.996396 11.5746 0.766039C11.4595 0.602643 11.4285 0.420492 11.3706 0.241023C11.3344 0.13254 11.2976 0.0213762 11.1752 0.00262835C11.0423 -0.0188007 10.9904 0.0950373 10.9384 0.190128C10.7292 0.578532 10.6489 1.00711 10.6561 1.44105C10.6745 2.41605 11.0792 3.19285 11.8818 3.74603C11.9733 3.80898 11.9969 3.87323 11.968 3.96566C11.9134 4.15582 11.8483 4.34069 11.7904 4.53084C11.7542 4.65277 11.6996 4.67951 11.572 4.62595C11.1312 4.43848 10.7502 4.16123 10.414 3.82502C9.84299 3.26252 9.32653 2.64111 8.68241 2.15492C8.53109 2.04107 8.38045 1.93526 8.22382 1.83481C7.56656 1.1839 8.31005 0.649519 8.48171 0.586569C8.66199 0.520945 8.54423 0.293255 7.96263 0.295936C7.38169 0.298617 6.84947 0.496834 6.1718 0.760683C6.0725 0.80086 5.96854 0.830326 5.86129 0.853092C5.24614 0.735235 4.60733 0.708444 3.93954 0.784787C2.68293 0.928097 1.67896 1.53347 0.940779 2.56739C0.054575 3.80897 -0.153982 5.22062 0.101289 6.69384C0.369718 8.24476 1.14671 9.53051 2.34147 10.535C3.57966 11.5757 5.00603 12.086 6.63301 11.9882C7.62119 11.9306 8.72188 11.7953 9.9627 10.7252C10.2758 10.8832 10.6041 10.9462 11.1496 10.9944C11.5693 11.0346 11.9733 10.973 12.2864 10.9073C12.7765 10.8016 12.7424 10.3395 12.5654 10.2537C11.1285 9.57206 11.4436 9.8493 11.1568 9.62562C11.8871 8.74438 12.9877 7.82962 13.418 4.86706C13.4516 4.6313 13.4226 4.48401 13.418 4.29248C13.4154 4.17728 13.4411 4.13175 13.5713 4.11838C13.9312 4.07682 14.2806 3.97636 14.6016 3.7956C15.5326 3.27726 15.9076 2.42682 15.9964 1.40623C16.0096 1.25087 15.9937 1.08881 15.8326 1.00711ZM7.72057 10.1908C6.32776 9.07518 5.65271 8.70818 5.3738 8.72429C5.11321 8.73897 5.15997 9.04302 5.21717 9.24126C5.27706 9.43677 5.35534 9.57206 5.46522 9.74349C5.54088 9.85732 5.59289 10.0274 5.38957 10.1533C4.94088 10.4372 4.16128 10.0582 4.12443 10.0395C3.21715 9.49574 2.45858 8.77648 1.9237 7.79341C1.4079 6.84656 1.10789 5.83133 1.05855 4.74781C1.04539 4.48531 1.12105 4.39287 1.37632 4.34604C1.71251 4.28309 2.05989 4.26972 2.39608 4.31923C3.81717 4.53084 5.02705 5.17906 6.0409 6.20368C6.61988 6.78895 7.05805 7.48675 7.50936 8.16844C7.98897 8.89305 8.50542 9.58276 9.16269 10.1479C9.39424 10.3462 9.57977 10.4975 9.75675 10.6087C9.22258 10.669 8.3304 10.6823 7.72057 10.1908ZM8.38766 5.81529C8.38766 5.69871 8.47908 5.60634 8.59422 5.60634C8.61989 5.60634 8.6436 5.61169 8.66462 5.61972C8.69292 5.63041 8.71926 5.64653 8.73967 5.6706C8.77645 5.7068 8.79754 5.76036 8.79754 5.81529C8.79754 5.93179 8.70612 6.02423 8.59159 6.02423C8.47646 6.02423 8.38766 5.93179 8.38766 5.81529ZM10.4607 6.90011C10.3278 6.95504 10.1949 7.00324 10.0673 7.00859C9.86926 7.01799 9.6528 6.93625 9.53504 6.83586C9.3528 6.68047 9.22258 6.59338 9.16727 6.32019C9.14423 6.20368 9.15743 6.02423 9.17778 5.92109C9.2252 5.69871 9.17252 5.55677 9.01925 5.42689C8.89361 5.32108 8.73502 5.29296 8.56006 5.29296C8.49492 5.29296 8.43502 5.26348 8.39029 5.23934C8.31726 5.20183 8.25737 5.10946 8.31463 4.99563C8.33303 4.95943 8.42189 4.86973 8.44291 4.85362C8.67978 4.71572 8.95344 4.76125 9.20675 4.86438C9.4416 4.9621 9.61858 5.14156 9.87384 5.39473C10.135 5.70145 10.1818 5.78717 10.3305 6.01614C10.4476 6.19696 10.5548 6.38177 10.6278 6.59338C10.6719 6.72463 10.6147 6.83312 10.4607 6.90011Z"
                      fill="currentColor"
                    />
                  </svg>
                )
                break
              case "xAI":
                logo = (
                  <svg
                    width="16"
                    height="18"
                    viewBox="0 0 16 18"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12.9657 5.79799L13.2688 18H15.6965L16 1.35603L12.9657 5.79799ZM16 0H12.2957L6.48287 8.51004L8.33501 11.2214L16 0ZM0 18H3.70429L5.5568 15.2887L3.70429 12.577L0 18ZM0 5.79799L8.33501 18H12.0393L3.70429 5.79799H0Z"
                      fill="currentColor"
                    />
                  </svg>
                )
                break
              case "Google":
                logo = (
                  <svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                    <path d="M16 8.016A8.522 8.522 0 008.016 16h-.032A8.521 8.521 0 000 8.016v-.032A8.521 8.521 0 007.984 0h.032A8.522 8.522 0 0016 7.984v.032z"></path>
                  </svg>
                )
                break
              default:
                logo = <div className="size-4 rounded-full bg-red-500" />
                break
            }

            return (
              <DropdownMenuItem
                key={`model ${id} ${model.company}`}
                onSelect={() => {
                  chatStore.setState({
                    model: models[id as keyof typeof models]
                  })
                }}
              >
                <div className="flex items-center gap-1.5">
                  {logo}
                  {model.name}
                  {model.subName && (
                    <span className="text-xs text-neutral-400">({model.subName})</span>
                  )}
                </div>

                <DropdownMenuShortcut className="flex items-center gap-1">
                  {model.features
                    ?.filter((f) => f !== "reasoningEffort")
                    .map((i) => {
                      const Icon = featureIcon[i]

                      return (
                        <Fragment key={`Feature ${i} for ${model.name}`}>
                          <Icon className="size-4" />
                        </Fragment>
                      )
                    })}
                </DropdownMenuShortcut>
              </DropdownMenuItem>
            )
          })}
        </DropdownMenuContent>
      </DropdownMenuPortal>
    </DropdownMenu>
  )
}
